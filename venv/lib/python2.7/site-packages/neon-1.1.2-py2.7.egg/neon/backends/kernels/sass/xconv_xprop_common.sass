

[-
    # set externally
    our ($prefix, $prop, $shareI, $shareF, $stepI, $stepF, $remapI, $remapF, $int16);

    our $addr_shift = $prefix eq 's' ? 2 : 1;

    sub fprop_params
    {
        my $params = <<'EOF';
    param_Sum[0]       : c[0x0][0x140]
    param_Sum[1]       : c[0x0][0x144]
    param_O[0]         : c[0x0][0x148]
    param_O[1]         : c[0x0][0x14c]
    param_I[0]         : c[0x0][0x150]
    param_I[1]         : c[0x0][0x154]
    param_F[0]         : c[0x0][0x158]
    param_F[1]         : c[0x0][0x15c]
    param_alpha        : c[0x0][0x160]
    param_beta         : c[0x0][0x164]
    param_flags        : c[0x0][0x168]
    param_offset_K     : c[0x0][0x16c]
    param_N            : c[0x0][0x170]
    param_K            : c[0x0][0x174]
    param_D            : c[0x0][0x178]
    param_H            : c[0x0][0x17c]
    param_W            : c[0x0][0x180]
    param_WN           : c[0x0][0x184]
    param_HWN          : c[0x0][0x188]
    param_DHWN         : c[0x0][0x18c]
    param_C            : c[0x0][0x190]
    param_KRST         : c[0x0][0x194]
    param_RST          : c[0x0][0x198]
    param_RS           : c[0x0][0x19c]
    param_magic_RS     : c[0x0][0x1a0]
    param_shift_RS     : c[0x0][0x1a4]
    param_S            : c[0x0][0x1a8]
    param_magic_S      : c[0x0][0x1ac]
    param_shift_S      : c[0x0][0x1b0]
    param_pad_d        : c[0x0][0x1b4]
    param_pad_h        : c[0x0][0x1b8]
    param_pad_w        : c[0x0][0x1bc]
    param_str_d        : c[0x0][0x1c0]
    param_str_h        : c[0x0][0x1c4]
    param_str_w        : c[0x0][0x1c8]
    param_Q            : c[0x0][0x1cc]
    param_PQ           : c[0x0][0x1d0]
    param_QN           : c[0x0][0x1d4]
    param_PQN          : c[0x0][0x1d8]
    param_MPQN         : c[0x0][0x1dc]
    param_magic_Q      : c[0x0][0x1e0]
    param_shift_Q      : c[0x0][0x1e4]
    param_magic_PQ     : c[0x0][0x1e8]
    param_shift_PQ     : c[0x0][0x1ec]
EOF
        $params .= <<'EOF' if $int16 && $prop eq 'f';
    param_Stats[0]     : c[0x0][0x1f0]
    param_Stats[1]     : c[0x0][0x1f4]
    param_scale        : c[0x0][0x1f8]
EOF
        return $params;
    }
    return;

    sub bprop_params {
        my $params = fprop_params() . <<'EOF';
    param_R            : c[0x0][0x1f0]
    param_T            : c[0x0][0x1f4]
    param_magic_str_w  : c[0x0][0x1f8]
    param_shift_str_w  : c[0x0][0x1fc]
    param_magic_str_h  : c[0x0][0x200]
    param_shift_str_h  : c[0x0][0x204]
    param_magic_str_d  : c[0x0][0x208]
    param_shift_str_d  : c[0x0][0x20c]
EOF
        $params .= <<'EOF' if $int16;
    param_Stats[0]     : c[0x0][0x210]
    param_Stats[1]     : c[0x0][0x214]
    param_scale        : c[0x0][0x218]
EOF
        return $params;
    }

    sub params
    {
        return $prop eq 'f' ? fprop_params() : bprop_params();
    }

    sub load_ids
    {
        return <<'EOF';
--:-:-:-:0      MOV one, 1;
--:-:1:-:6      S2R tid, SR_TID.X;
--:-:-:Y:d      ISETP.EQ.AND P0, PT, one, param_RST, PT;
--:-:-:-:5  @P0 BRA.U CTAID1;
--:-:2:-:1      S2R blkF,   SR_CTAID.Y;
--:-:3:-:1      S2R blkI,   SR_CTAID.Z;
--:-:4:-:1      S2R blkMPQ, SR_CTAID.X;
--:-:-:-:5      BRA.U END_CTAID1;
CTAID1:
--:-:2:-:1      S2R blkF,   SR_CTAID.X;
--:-:3:-:1      S2R blkI,   SR_CTAID.Y;
--:-:4:-:1      S2R blkMPQ, SR_CTAID.Z;
END_CTAID1:
EOF
    }

    sub reload_ids
    {
        return <<'EOF';
--:-:-:-:0      MOV one, 1;
--:-:1:-:6      LDS.U.128 mpq, [addr_m];
--:-:-:-:0      ISETP.EQ.AND P0, PT, one, param_RST, PT;
--:-:2:Y:d      S2R tid, SR_TID.X;
--:-:-:-:5  @P0 BRA.U CTAID2;
--:-:3:-:1      S2R blkF,   SR_CTAID.Y;
--:-:4:-:1      S2R blkI,   SR_CTAID.Z;
--:-:-:-:5      BRA.U END_CTAID2;
CTAID2:
--:-:3:-:1      S2R blkF,   SR_CTAID.X;
--:-:4:-:1      S2R blkI,   SR_CTAID.Y;
END_CTAID2:
EOF
    }

    sub load_zeros
    {
        return  "--:-:-:-:1      STS.128 [addr_zero], RZ;\n" .
                join '', map sprintf("--:-:-:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..15;
    }

    sub begin_lut
    {
        return <<'EOF';
--:-:-:-:5  @P0 BRA.U END_SETUP;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV rst,        tid;
--:-:-:-:1      MOV lutStore2,  RZ;
--:-:-:-:1      MOV lutSize,    RZ;
--:-:-:-:1      MOV warp_count, 32;

--:-:-:-:1      MOV  magicPQ,    param_magic_PQ;
--:-:-:-:1      MOV  magicQ,     param_magic_Q;
--:-:-:-:1      IADD negQ,  RZ, -param_Q;
--:-:-:-:1      IADD negPQ, RZ, -param_PQ;

--:-:-:-:1      ISETP.NE.AND P1, PT, magicPQ, 1, PT;
--:-:-:-:1      ISETP.NE.AND P2, PT, magicQ,  1, PT;

// m = blkMPQ / PQ
--:-:-:-:1  @P1 XMAD     div1, blkMPQ,    magicPQ,    RZ;
--:-:-:-:1  @P1 XMAD     div2, blkMPQ,    magicPQ.H1, RZ;
--:-:-:-:1  @P1 XMAD     div3, blkMPQ.H1, magicPQ.H1, RZ;
--:-:-:-:1  @P1 XMAD.CHI div1, blkMPQ.H1, magicPQ,    div1;
--:-:-:-:1  @P1 IADD3.RS m, div1, div2, div3;
--:-:-:-:1  @P1 SHR.U32  m, m,      param_shift_PQ;
--:-:-:-:1 @!P1 SHR.U32  m, blkMPQ, param_shift_PQ;

// pq = blkMPQ % PQ
--:-:-:-:1      XMAD.LO2 blkMPQ, negPQ, m, blkMPQ;

// p = blockPQ / Q
--:-:-:-:1  @P2 XMAD     div1, blkMPQ,    magicQ,    RZ;
--:-:-:-:1  @P2 XMAD     div2, blkMPQ,    magicQ.H1, RZ;
--:-:-:-:1  @P2 XMAD     div3, blkMPQ.H1, magicQ.H1, RZ;
--:-:-:-:1  @P2 XMAD.CHI div1, blkMPQ.H1, magicQ,    div1;
--:-:-:-:1  @P2 IADD3.RS p, div1, div2, div3;
--:-:-:-:1  @P2 SHR.U32  p, p,  param_shift_Q;
--:-:-:-:1 @!P2 SHR.U32  p, blkMPQ, param_shift_Q;

// q = blockPQ % Q
--:-:-:-:1      XMAD.S16.S16 q, negQ, p, blkMPQ;

--:-:-:-:1      MOV dep_thd_mask, -1;

--:-:-:-:1      LOP.AND.NZ P1, RZ, p, 1;
--:-:-:-:1  @P1 IADD3 q, -q, param_Q, dep_thd_mask;

--:-:-:-:1      IADD    mask_shr, -tid, 32;
--:-:-:-:1      SHR.U32 dep_thd_mask, dep_thd_mask, mask_shr;

--:-:-:-:1      STS.128 [addr_m], m;
EOF
    }

    sub end_lut
    {
        return sprintf <<'EOF', $addr_shift;
<ORDERED>
// Get a mask of all valid slices in the warp
--:-:-:-:1      VOTE.ANY ballot, PT, P1;
// Count the total valid slices
--:-:2:-:1      POPC warp_slices, ballot;
// Prepare lutStore for this and next loop
--:-:-:-:1  @P1 MOV    lutStore, lutStore2;
02:-:-:-:1      ISCADD lutStore2, warp_slices, lutStore2, 3;
// Count all the valid slices below this threadid
--:-:-:-:1  @P1 LOP.AND dep_thd_bits, dep_thd_mask, ballot;
--:-:3:-:1  @P1 POPC dep_thd_cnt, dep_thd_bits;
// use the rst increment to space the barrier sync
--:-:-:-:1      IADD rst, rst, 32;
// Update the lutStore address from this count
04:-:-:-:1  @P1 ISCADD lutStore, dep_thd_cnt, lutStore, 3;
// Store both slice offsets in the lut
--:1:-:-:1  @P1 STS.64 [lutStore + addr_lut], sliceIF;
</ORDERED>
// Keep track of the total size of the lut
--:-:-:-:1      IADD lutSize, lutSize, warp_slices;
</SCHEDULE_BLOCK>

--:-:-:-:5  @P0 BRA.U LUT_LOOP;

// Share the lut size with the other warp
--:1:-:-:2      STS [addr_szLut], lutSize;

END_SETUP:

01:-:-:-:5      BAR.SYNC 0;

// Grab the caclulated lut size and get it's reciprical
// Get the total reduction depth
--:-:1:-:2      LDS lutSize, [addr_szLut];
01:-:-:-:0      XMAD endCRST, lutSize, param_C, RZ;
--:-:1:-:2      I2F.F32.S32 lutSizeRcp, lutSize;
01:-:1:-:1      MUFU.RCP lutSizeRcp, lutSizeRcp;

<SCHEDULE_BLOCK>
// lutSize != 0
--:-:-:-:1      LOP.AND.NZ P0, RZ, lutSize, -1;
// posCRST = endCRST - tidY - 1
--:-:-:-:1      IADD3 posCRST, endCRST, -1, -tidY;
// If this value is not a multiple of 8 we want to grab the partial amount on the first fetch.
// If it is a multiple of 8 then make a full 8 line fetch.
--:-:-:-:1      LOP.AND.Z P1, partial, endCRST, 7;
--:-:-:-:1  @P1 MOV partial, 8;
// channel = posCRST / lutSize
// Add an epsilon scaled to the size of the channel estimate then recompute and truncate it
--:-:2:-:1      I2F.F32.S32 posCRSTf, posCRST;
03:-:-:-:1      FMUL channel, posCRSTf, lutSizeRcp;
--:-:-:-:1      FFMA channel, channel, 5.9604644775390625e-08, channel;
--:-:2:-:1      F2I.S32.F32.TRUNC channel, channel;
// lutOffset = (posCRST % lutSize) * 8
02:-:-:-:1      VMAD.U16.U16 lutOffset, -channel, lutSize, posCRST;
--:-:-:-:1      SHL lutOffset, lutOffset, 3;
// P1 = tidY < partial &&
--:-:-:-:1      ISETP.LT.AND P1, PT, tidY, partial, P0;
// offsetIC = channel * DHWN
// offsetFC = channel * K
--:-:-:-:1      XMAD.LO2C offsetIc, channel, param_DHWN, RZ;
--:-:-:-:1      XMAD      offsetFc, channel, param_KRST, RZ;
// posCRST -= partial
--:-:-:-:1      IADD posCRST, posCRST, -partial;
--:-:1:-:2  @P1 LDS.U.64 sliceIF, [lutOffset + addr_lut];
</SCHEDULE_BLOCK>

// trackI = offsetIN + offsetIC + sliceI + param_I
// trackF = offsetFK + offsetFC + sliceF + param_F
01:-:-:-:1  @P1 IADD3 offsetF, offsetFk, offsetFc, sliceF;
--:-:-:-:5  @P1 IADD3 offsetI, offsetIn, offsetIc, sliceI;
--:-:-:-:6  @P1 LEA      trackF0.CC, offsetF, param_F[0],     %1$s;
--:-:-:-:1  @P1 LEA.HI.X trackF1,    offsetF, param_F[1], RZ, %1$s;
--:-:-:-:6  @P1 LEA      trackI0.CC, offsetI, param_I[0],     %1$s;
--:-:-:-:0  @P1 LEA.HI.X trackI1,    offsetI, param_I[1], RZ, %1$s;
EOF
    }

    sub fprop_lut
    {
        return begin_lut() . <<'EOF' . end_lut();
// mt = m * w - pad_d
// pr = p * u - pad_h
// qs = q * v - pad_w
--:-:-:-:1      XMAD qs, q,   param_str_w, RZ;
--:-:-:-:1      XMAD pr, p,   param_str_h, RZ;
--:-:-:-:1      XMAD mt, m,   param_str_d, RZ;
--:-:-:-:1      IADD qs, qs, -param_pad_w;
--:-:-:-:1      IADD pr, pr, -param_pad_h;
--:-:-:-:1      IADD mt, mt, -param_pad_d;
</SCHEDULE_BLOCK>

LUT_LOOP:

<SCHEDULE_BLOCK>
// warp synchronous loop while warp_count < RST
--:-:-:-:1      ISETP.LT.AND P0, PT, warp_count, param_RST, PT;
--:-:-:-:1      ISETP.LT.AND P6, PT, rst, param_RST, PT;

--:-:-:-:1      IADD warp_count, warp_count, 32;
// t =  rst / RS
// rs = rst % RS
--:-:-:-:1      XMAD.LO2C t, rst, param_magic_RS, RZ;
--:-:-:-:1      SHR.U32   t, t, param_shift_RS;
--:-:-:-:1      XMAD  rs, t, param_RS, RZ;
--:-:-:-:1      IADD  rs, -rs, rst;
// r = rs / S
// s = rs % S
--:-:-:-:1      XMAD.LO2C r, rs, param_magic_S, RZ;
--:-:-:-:1      SHR.U32   r, r, param_shift_S;
--:-:-:-:1      XMAD   s, r, param_S, RZ;
--:-:-:-:1      IADD   s, -s, rs;
// x = qs + s
// y = pr + r
// z = mt + t
--:-:-:-:1      IADD x, qs, s;
--:-:-:-:1      IADD y, pr, r;
--:-:-:-:1      IADD z, mt, t;
--:-:-:-:1      ISETP.GE.AND  P4, PT, x, RZ, PT;
--:-:-:-:1      ISETP.GE.AND  P5, PT, y, RZ, PT;
--:-:-:-:1      ISETP.GE.AND  P6, PT, z, RZ, P6;
--:-:-:-:1      ISETP.LT.AND  P4, PT, x, param_W, P4;
--:-:-:-:1      ISETP.LT.AND  P5, PT, y, param_H, P5;
--:-:-:-:1      ISETP.LT.AND  P6, PT, z, param_D, P6;
--:-:-:-:1      PSETP.AND.AND P1, PT, P4, P5, P6;

<ORDERED>
// sliceI = z*HWN + y*WN + x*N
01:-:-:-:1      XMAD      sliceI, x, param_N,   RZ;
--:-:-:-:1      XMAD.LO2C sliceI, y, param_WN,  sliceI;
--:-:-:-:1      XMAD.LO2C sliceI, z, param_HWN, sliceI;
// sliceF = rst * K
--:-:-:-:1      XMAD sliceF, rst, param_K, RZ;
</ORDERED>
EOF
    }

    sub bprop_lut
    {
        return begin_lut() . <<'EOF' . end_lut();
--:-:-:-:1      MOV str_d,      param_str_d;
--:-:-:-:1      MOV str_h,      param_str_h;
--:-:-:-:1      MOV str_w,      param_str_w;
// qs = q - S + pad_w + 1
// pr = p - R + pad_h + 1
// mt = m - T + pad_d + 1
--:-:-:-:1      IADD  qs, q, -param_S;
--:-:-:-:1      IADD3 qs, qs, param_pad_w, one;
--:-:-:-:1      IADD  pr, p, -param_R;
--:-:-:-:1      IADD3 pr, pr, param_pad_h, one;
--:-:-:-:1      IADD  mt, m, -param_T;
--:-:-:-:1      IADD3 mt, mt, param_pad_d, one;
</SCHEDULE_BLOCK>

LUT_LOOP:

<SCHEDULE_BLOCK>
// warp synchronous loop while warp_count < RST
--:-:-:-:1      ISETP.LT.AND P0, PT, warp_count, param_RST, PT;
--:-:-:-:1      ISETP.LT.AND P6, PT, rst, param_RST, PT;
--:-:-:-:1      IADD warp_count, warp_count, 32;
// t =  rst / RS
// rs = rst % RS
--:-:-:-:1      XMAD.LO2C t, rst, param_magic_RS, RZ;
--:-:-:-:1      SHR.U32   t, t, param_shift_RS;
--:-:-:-:1      XMAD  rs, t, param_RS, RZ;
--:-:-:-:1      IADD  rs, -rs, rst;
// r = rs / S
// s = rs % S
--:-:-:-:1      XMAD.LO2C r, rs, param_magic_S, RZ;
--:-:-:-:1      SHR.U32   r, r, param_shift_S;
--:-:-:-:1      XMAD   s, r, param_S, RZ;
--:-:-:-:1      IADD   s, -s, rs;
// x = qs + s
// y = pr + r
// z = mt + t
--:-:-:-:1      IADD x, qs, s;
--:-:-:-:1      IADD y, pr, r;
--:-:-:-:1      IADD z, mt, t;
--:-:-:-:1      ISETP.GE.AND  P4, PT, x, RZ, PT;
--:-:-:-:1      ISETP.GE.AND  P5, PT, y, RZ, PT;
--:-:-:-:1      ISETP.GE.AND  P6, PT, z, RZ, P6;
// s = S - s - 1
// r = R - r - 1
// t = T - t - 1
// rst_prime = t*RS + r*S + s
--:-:-:-:1      IADD3 s, -s, param_S, -one;
--:-:-:-:1      IADD3 r, -r, param_R, -one;
--:-:-:-:1      IADD3 t, -t, param_T, -one;
--:-:-:-:1      XMAD  rst_prime, r, param_S,  s;
--:-:-:-:1      XMAD  rst_prime, t, param_RS, rst_prime;
// x_prime = x / str_w
// x       = x % str_w
--:-:-:-:1      XMAD    x_prime, x, param_magic_str_w, RZ;
--:-:-:-:1      SHR.U32 x_prime, x_prime, param_shift_str_w;
--:-:-:-:1      VMAD.U16.U16 x, -x_prime, str_w, x;
// y_prime = y / str_h
// y       = y % str_h
--:-:-:-:1      XMAD    y_prime, y, param_magic_str_h, RZ;
--:-:-:-:1      SHR.U32 y_prime, y_prime, param_shift_str_h;
--:-:-:-:1      VMAD.U16.U16 y, -y_prime, str_h, y;
// z_prime = z / str_d
// z       = z % str_d
--:-:-:-:1      XMAD    z_prime, z, param_magic_str_d, RZ;
--:-:-:-:1      SHR.U32 z_prime, z_prime, param_shift_str_d;
--:-:-:-:1      VMAD.U16.U16 z, -z_prime, str_d, z;

--:-:-:-:1      ISETP.EQ.AND  P4, PT, x, RZ, P4;
--:-:-:-:1      ISETP.EQ.AND  P5, PT, y, RZ, P5;
--:-:-:-:1      ISETP.EQ.AND  P6, PT, z, RZ, P6;
--:-:-:-:1      ISETP.LT.AND  P4, PT, x_prime, param_W, P4;
--:-:-:-:1      ISETP.LT.AND  P5, PT, y_prime, param_H, P5;
--:-:-:-:1      ISETP.LT.AND  P6, PT, z_prime, param_D, P6;
--:-:-:-:1      PSETP.AND.AND P1, PT, P4, P5, P6;

// sliceI = z_prime*HWN + y_prime*WN + x_prime*N
01:-:-:-:1      XMAD      sliceI, x_prime, param_N,   RZ;
--:-:-:-:1      XMAD.LO2C sliceI, y_prime, param_WN,  sliceI;
--:-:-:-:1      XMAD.LO2C sliceI, z_prime, param_HWN, sliceI;
// sliceF = rst_prime * K
01:-:-:-:1      XMAD sliceF, rst_prime, param_K, RZ;
EOF
    }

    sub load_lut
    {
        return $prop eq 'f' ? fprop_lut() : bprop_lut();
    }

    sub loop_setup
    {
        my $swap;
        if ($shareI == $shareF)
        {
            $swap = <<'EOF';
--:-:-:-:0      LOP.XOR writeS, writeS, 4x<szShareF + szShareI>;
EOF
        }
        else
        {
            $swap = <<'EOF';
--:-:-:-:1      IADD writeIs, writeIs, swapBuf;
--:-:-:-:1      IADD writeFs, writeFs, swapBuf;
--:-:-:-:0      IADD swapBuf, RZ,     -swapBuf;
EOF
        }
        return sprintf <<'EOF', $shareI, $shareF, $stepI, $stepF, $addr_shift, $swap;

--:-:-:-:0      ISETP.GE.AND P1, PT, posCRST, RZ, PT;
--:-:2:-:1      I2F.F32.S32 posCRSTf, posCRST;

01:-:-:-:5      BAR.SYNC 0;
%6$s

--:-:-:-:1      LDS.U.128 j0Ix0, [readIs + 4x<0*%1$-3s + 00>];
--:-:-:-:1      LDS.U.128 j0Fy0, [readFs + 4x<0*%2$-3s + 00>];
--:-:-:-:1      LDS.U.128 j0Ix4, [readIs + 4x<0*%1$-3s + %3$s>];
--:-:1:-:2      LDS.U.128 j0Fy4, [readFs + 4x<0*%2$-3s + %4$s>];

<SCHEDULE_BLOCK>
// channel = posCRST / lutSize
02:-:-:-:1  @P1 FMUL channel, posCRSTf, lutSizeRcp;
--:-:-:-:1  @P1 FFMA channel, channel, 5.9604644775390625e-08, channel;
--:-:2:-:1  @P1 F2I.S32.F32.TRUNC channel, channel;
// lutOffset = (posCRST % lutSize) * 8
02:-:-:-:1  @P1 VMAD.U16.U16 lutOffset, -channel, lutSize, posCRST;
--:-:-:-:1  @P1 SHL lutOffset, lutOffset, 3;
// offsetIC = channel * DHWN
// offsetFC = channel * K
--:-:-:-:1  @P1 XMAD.LO2C offsetIc, channel, param_DHWN, RZ;
--:-:-:-:1  @P1 XMAD      offsetFc, channel, param_KRST, RZ;

--:-:-:-:1      IADD posCRST, posCRST, -8;
--:-:2:-:2  @P1 LDS.U.64 sliceIF, [lutOffset + addr_lut];
</SCHEDULE_BLOCK>

// trackI = offsetIN + offsetIC + sliceI + param_I
// trackF = offsetFK + offsetFC + sliceF + param_F
02:-:-:-:1  @P1 IADD3 offsetF, offsetFk, offsetFc, sliceF;
--:-:-:-:5  @P1 IADD3 offsetI, offsetIn, offsetIc, sliceI;
--:-:-:-:6  @P1 LEA      trackF0.CC, offsetF, param_F[0],     %5$s;
--:-:-:-:1  @P1 LEA.HI.X trackF1,    offsetF, param_F[1], RZ, %5$s;
--:-:-:-:6  @P1 LEA      trackI0.CC, offsetI, param_I[0],     %5$s;
--:-:-:-:0  @P1 LEA.HI.X trackI1,    offsetI, param_I[1], RZ, %5$s;
EOF
    }

    sub main_loop
    {
        our %insert;
        my @cOrder;
        my @swirl = ([0,2],[1,2],[1,0],[0,0]);
        my @y = (0,1,4,5);
        foreach my $x (0,2,4,6)
        {
            foreach my $y (@y)
            {
                push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
            }
            @y = reverse @y;
        }
        my $out;
        foreach my $j (0 .. 7)
        {
            my $odd      = $j & 1;
            my $nOdd     = !$odd + 0;
            my $rsOffset = ($j + 1) % 8;
            my $rsPred   = $j == 7 ? '@P0' : '   ';

            $insert{"j${j}c0"} = sprintf "--:-:-:-:1  %s LDS.U.128 j%dIx0, [readIs + 4x<%d*%-3s + 00>];\n", $rsPred, $nOdd, $rsOffset, $shareI;
            $insert{"j${j}c2"} = sprintf "--:-:-:-:1  %s LDS.U.128 j%dFy0, [readFs + 4x<%d*%-3s + 00>];\n", $rsPred, $nOdd, $rsOffset, $shareF;
            $insert{"j${j}c4"} = sprintf "--:-:-:-:1  %s LDS.U.128 j%dIx4, [readIs + 4x<%d*%-3s + %s>];\n", $rsPred, $nOdd, $rsOffset, $shareI, $stepI;
            $insert{"j${j}c6"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dFy4, [readFs + 4x<%d*%-3s + %s>];\n", $rsPred, $nOdd, $rsOffset, $shareF, $stepF;

            foreach my $c (0 .. 63)
            {
                my ($x,$y) = @{$cOrder[$c]};

                my $ins    = $insert{"j${j}c$c"} || '';

                my $stall  = $ins =~ /LDS|I2I|I2F|F2I|F2F|LDG|STS|BAR|BRA/ ? 0 : 1;

                my $yield  = $c == 32 && $stall ? 'Y' : '-';

                my $wait   = $c == 0 ? '01' : '--';

                my $ctrl   = "$wait:-:-:$yield:$stall";

                $out .= sprintf "%s      FFMA cx%dy%d, j%dIx%d, j%dFy%d, cx%dy%d;\n%s", $ctrl,  $x,$y,  $odd,$x,  $odd,$y,  $x,$y,  $ins;
            }
        }
        return $out;
    }


    sub output_offset
    {
        my $tidOX = shift;

        return sprintf <<'EOF', $tidOX, $addr_shift;
// sum = S + k
--:-:-:-:1      LEA      Sum0.CC, k, param_Sum[0],     2;
--:-:-:-:1      LEA.HI.X Sum1,    k, param_Sum[1], RZ, 2;

--:-:-:-:1      LOP.AND tidOX63, tidOX, %1$s;


// o = k*MPQN + m*PQN + p*QN + q*N + n
01:-:-:-:1      XMAD      to, q, param_N,    n;
--:-:-:-:1      XMAD.LO2C to, p, param_QN,   to;
--:-:-:-:1      XMAD.LO2C to, m, param_PQN,  to;
--:-:-:-:1      XMAD.LO2C to, k, param_MPQN, to;
--:-:-:-:1      LEA      Out0.CC, to, param_O[0],     %2$s;
--:-:-:-:0      LEA.HI.X Out1,    to, param_O[1], RZ, %2$s;
EOF
    }

    sub output_step
    {

        return sprintf <<'EOF', $addr_shift if $remapF;
--:-:-:-:1      MOV  MPQN,  param_MPQN;
--:-:-:-:1      SHL  MPQN1, MPQN, %1$s;
EOF

        my $shift4 = 2 + $addr_shift;
        my $shiftK = 1;
        $shiftK += 1 while 1 << $shiftK < $stepF;
        $shiftK += $addr_shift;
        return sprintf <<'EOF', $addr_shift, $shift4, $stepF-4, $shiftK;
--:-:-:-:1      MOV  MPQN,  param_MPQN;
--:-:-:-:1      SHL  MPQN1, MPQN, %1$s;
--:-:-:-:1      SHL  MPQN4, MPQN, %2$s;
--:-:-:-:1      ISCADD MPQN%3$s, MPQN, -MPQN4, %4$s;
EOF

    }

    sub call_output
    {
        my $out = "--:-:-:-:5      BAR.SYNC 0;\n\n";

        foreach my $y (0..7)
        {
            if ($y == 4 && !$remapF)
            {
                my $stepK = $stepF-4;

                $out .= sprintf(
                    "--:-:-:-:1      IADD Out0.CC, Out0, MPQN%d;\n" .
                    "--:-:-:-:1      IADD k, k, %d;\n" .
                    "--:-:-:-:1      FMUL cs0, cx0y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs1, cx1y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs2, cx2y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs3, cx3y%d, alpha;\n" .
                    "--:-:-:-:1      IADD.X Out1, Out1, RZ;\n"   .
                    "--:-:-:-:1      IADD Sum0.CC, Sum0, 4x<%d>;\n" .
                    "--:-:-:-:1      FMUL cs4, cx4y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs5, cx5y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs6, cx6y%d, alpha;\n" .
                    "--:-:-:-:2      FMUL cs7, cx7y%d, alpha;\n" .
                    "--:-:-:-:0      IADD.X Sum1, Sum1, RZ;\n",
                    ($stepK) x 2, ($y) x 4, $stepK, ($y) x 4);
            }
            else
            {
                $out .= sprintf(
                    "--:-:-:-:1      FMUL cs0, cx0y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs1, cx1y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs2, cx2y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs3, cx3y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs4, cx4y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs5, cx5y%d, alpha;\n" .
                    "--:-:-:-:1      FMUL cs6, cx6y%d, alpha;\n" .
                    "--:-:-:-:0      FMUL cs7, cx7y%d, alpha;\n",
                    ($y) x 8);
            }
            $out .= "--:-:-:-:5      CAL STORE_C;\n\n";
        }
        return $out;
    }

    sub output_preds_fp32
    {
        return sprintf <<'EOF', $stepI;
--:-:-:-:1      MOV alpha, param_alpha;
--:-:-:-:1      MOV beta,  param_beta;
--:-:-:-:1      MOV flags, param_flags;

--:-:-:-:1      LOP.AND.Z  P2, RZ, flags, 1; // no output
--:-:-:-:1      LOP.AND.NZ P3, RZ, flags, 2; // relu

--:-:-:-:1      ISETP.LT.AND P0, PT, n, param_N, P2; // n +  0 < N
--:-:-:-:1      IADD n, n, %1$s;
--:-:-:-:1      ISETP.LT.AND P1, PT, n, param_N, P2; // n + %1$s < N

--:-:-:-:1      ISETP.NE.AND P4, PT, beta, RZ, PT; // beta != 0
--:-:-:-:1      ISETP.NE.AND P5, PT, beta, RZ, P0; // beta != 0 && n +  0 < N
--:-:-:-:1      ISETP.NE.AND P6, PT, beta, RZ, P1; // beta != 0 && n + %1$s < N
EOF
    }

    sub output_fp32
    {
        return sprintf <<'EOF', $stepI;
--:-:-:-:5      EXIT;

STORE_C:

<SCHEDULE_BLOCK>

// Apply relu
--:-:-:-:1  @P3 FMNMX cs0, cs0, RZ, !PT;
--:-:-:-:1  @P3 FMNMX cs1, cs1, RZ, !PT;
--:-:-:-:1  @P3 FMNMX cs2, cs2, RZ, !PT;
--:-:-:-:1  @P3 FMNMX cs3, cs3, RZ, !PT;
--:-:-:-:1  @P3 FMNMX cs4, cs4, RZ, !PT;
--:-:-:-:1  @P3 FMNMX cs5, cs5, RZ, !PT;
--:-:-:-:1  @P3 FMNMX cs6, cs6, RZ, !PT;
--:-:-:-:1  @P3 FMNMX cs7, cs7, RZ, !PT;

--:-:-:-:1      ISETP.LT.AND P2, PT, k, param_K, P5; // beta != 0 && k < K && n +  0 < N
--:-:-:-:1      ISETP.LT.AND P3, PT, k, param_K, P6; // beta != 0 && k < K && n + %1$s < N

// Warp shuffle
<ORDERED>
--:-:5:-:1  @P2 LDG.E.128 b0, [Out + 4x<00>];
--:-:6:-:1  @P3 LDG.E.128 b4, [Out + 4x<%1$s>];

--:-:-:-:1      STS.128 [writeCs + 4x<00>], cs0;
--:-:-:-:1      STS.128 [writeCs + 4x<%1$s>], cs4;
--:-:1:-:1      LDS.U.128 cs0, [readCs + 4x<00>];
--:-:2:-:1      LDS.U.128 cs4, [readCs + 4x<%1$s>];
</ORDERED>

--:-:-:-:1      ISETP.LT.AND P2, PT, k, param_K, P0; // k < K && n +  0 < N
--:-:-:-:1      ISETP.LT.AND P3, PT, k, param_K, P1; // k < K && n + %1$s < N
--:-:-:-:1      IADD k, k, 1;

</SCHEDULE_BLOCK>

11:-:-:-:1  @P4 FFMA cs0, b0, beta, cs0;
--:-:-:-:1  @P4 FFMA cs1, b1, beta, cs1;
--:-:-:-:1  @P4 FFMA cs2, b2, beta, cs2;
--:-:-:-:1  @P4 FFMA cs3, b3, beta, cs3;
22:-:-:-:1  @P4 FFMA cs4, b4, beta, cs4;
--:-:-:-:1  @P4 FFMA cs5, b5, beta, cs5;
--:-:-:-:1  @P4 FFMA cs6, b6, beta, cs6;
--:-:-:-:1  @P4 FFMA cs7, b7, beta, cs7;

--:-:-:-:0      LOP.AND.NZ P4, RZ, flags, 4;

// Store results back to global
--:-:-:-:2  @P2 STG.E.CG.128 [Out + 4x<00>], cs0;
--:1:-:-:1  @P3 STG.E.CG.128 [Out + 4x<%1$s>], cs4;

<SCHEDULE_BLOCK>
--:-:-:-:1 @!P2 MOV  sum0, RZ;
--:-:-:-:1 @!P3 MOV  sum2, RZ;
--:-:-:-:1  @P2 FADD sum0, cs0, cs1;
--:-:-:-:1  @P2 FADD sum1, cs2, cs3;
--:-:-:-:1  @P3 FADD sum2, cs4, cs5;
--:-:-:-:1  @P3 FADD sum3, cs6, cs7;
--:-:-:-:1  @P2 FADD sum0, sum0, sum1;
--:-:-:-:1  @P3 FADD sum2, sum2, sum3;
--:-:-:-:4      FADD sum0, sum0, sum2;
</SCHEDULE_BLOCK>

--:-:-:-:0      PSETP.OR.AND P2, PT, P2, P3, P4;

--:-:2:-:2  @P4 SHFL.BFLY PT, sum1, sum0, 1,  0x1f;
02:-:-:-:4  @P4 FADD sum0, sum1, sum0;

--:-:-:-:0      ISETP.EQ.AND P2, PT, tidOX63, RZ, P2;

--:-:2:-:2  @P4 SHFL.BFLY PT, sum1, sum0, 2,  0x1f;
02:-:-:-:4  @P4 FADD sum0, sum1, sum0;
--:-:2:-:2  @P4 SHFL.BFLY PT, sum1, sum0, 4,  0x1f;
02:-:-:-:2  @P4 FADD sum0, sum1, sum0;

01:-:-:-:0      IADD   Out0.CC, Out0, MPQN1;

--:2:-:-:1  @P2 RED.E.ADD.F32.FTZ.RN [Sum], sum0;

--:-:-:-:1      LOP.AND.NZ P3, RZ, flags, 2;
--:-:-:-:4      ISETP.NE.AND P4, PT, beta, RZ, PT;

--:-:-:-:1      IADD.X Out1, Out1, RZ;

02:-:-:-:6      IADD   Sum0.CC, Sum0, 4;
--:-:-:-:0      IADD.X Sum1,    Sum1, RZ;

--:-:-:-:5      RET;
EOF
    }


    sub output_preds_fp16
    {
        return <<'EOF';
--:-:-:-:1      MOV alpha, param_alpha;
--:-:-:-:1      MOV beta,  param_beta;
--:-:-:-:1      MOV flags, param_flags;

--:-:-:-:1      LOP.AND.Z  P1, RZ, flags, 1; // no output
--:-:-:-:1      LOP.AND.NZ P2, RZ, flags, 2; // relu

--:-:-:-:1      ISETP.LT.AND P0, PT, n, param_N, P1; // n +  0 < N

--:-:-:-:1      ISETP.NE.AND P3, PT, beta, RZ, P1; // beta != 0
--:-:-:-:1      ISETP.NE.AND P4, PT, beta, RZ, P0; // beta != 0 && n < N
EOF
    }

    sub output_fp16
    {
        return sprintf <<'EOF', $remapI ? 4 : $stepI;
--:-:-:-:5      EXIT;

STORE_C:

<SCHEDULE_BLOCK>
--:-:-:-:1      ISETP.LT.AND P6, PT, k, param_K, P4; // k < K && n < N && beta != 0
--:-:-:-:1      ISETP.LT.AND P5, PT, k, param_K, P0; // k < K && n < N

// Apply relu
--:-:-:-:1  @P2 FMNMX cs0, cs0, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs1, cs1, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs2, cs2, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs3, cs3, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs4, cs4, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs5, cs5, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs6, cs6, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs7, cs7, RZ, !PT;

<ORDERED>
--:-:1:-:1  @P6 LDG.E.128 b0, [Out];

--:-:-:-:1      LOP.AND.NZ P6, RZ, flags, 4;
--:-:-:-:1      ISETP.EQ.AND P2, PT, tidOX63, RZ, PT;

// Undo the stride in the X dim (items spaced by 32 are actually spaced 4)
--:-:-:-:1      STS.128 [writeCs + 4x<0>], cs0;
--:-:-:-:1      STS.128 [writeCs + 4x<%1$s>], cs4;
--:-:5:-:1      LDS.U.128 cs4, [readCs + 4x<4>];
--:-:6:-:1      LDS.U.128 cs0, [readCs + 4x<0>];
</ORDERED>
</SCHEDULE_BLOCK>

01:-:-:-:1  @P3 F2F.F32.F16 b7, b3.H1;
--:-:1:-:1  @P3 F2F.F32.F16 b6, b3.H0;
--:-:-:-:1  @P3 F2F.F32.F16 b5, b2.H1;
--:-:2:-:1  @P3 F2F.F32.F16 b4, b2.H0;
--:-:-:-:1  @P3 F2F.F32.F16 b3, b1.H1;
--:-:3:-:1  @P3 F2F.F32.F16 b2, b1.H0;
--:-:-:-:1  @P3 F2F.F32.F16 b1, b0.H1;
--:-:4:-:1  @P3 F2F.F32.F16 b0, b0.H0;

<SCHEDULE_BLOCK>
11:-:-:-:1  @P3 FFMA cs7, b7, beta, cs7;
--:-:-:-:1  @P3 FFMA cs6, b6, beta, cs6;
02:-:-:-:1  @P3 FFMA cs5, b5, beta, cs5;
--:-:-:-:1  @P3 FFMA cs4, b4, beta, cs4;
24:-:-:-:1  @P3 FFMA cs3, b3, beta, cs3;
--:-:-:-:1  @P3 FFMA cs2, b2, beta, cs2;
08:-:-:-:1  @P3 FFMA cs1, b1, beta, cs1;
--:-:-:-:1  @P3 FFMA cs0, b0, beta, cs0;

--:-:-:-:1  @P5 FADD sum0, cs7, cs6;
--:-:-:-:1  @P5 FADD sum1, cs5, cs4;
--:-:-:-:1  @P5 FADD sum2, cs3, cs2;
--:-:-:-:1  @P5 FADD sum3, cs1, cs0;
--:-:-:-:1  @P5 FADD sum0, sum0, sum1;
--:-:-:-:1  @P5 FADD sum1, sum2, sum3;
--:-:-:-:1  @P5 FADD sum0, sum0, sum1;
--:-:-:-:1 @!P5 MOV  sum0, RZ;

--:-:-:-:1      F2F.F16.F32 cs7, cs7;
--:-:1:-:1      F2F.F16.F32 cs6, cs6;
--:-:-:-:1      F2F.F16.F32 cs5, cs5;
--:-:2:-:1      F2F.F16.F32 cs4, cs4;
--:-:-:-:1      F2F.F16.F32 cs3, cs3;
--:-:3:-:1      F2F.F16.F32 cs2, cs2;
--:-:-:-:1      F2F.F16.F32 cs1, cs1;
--:-:4:-:1      F2F.F16.F32 cs0, cs0;
</SCHEDULE_BLOCK>

// Pack 2 16 bit values into 32 bit words
01:-:-:-:2      BFI c3, cs7, 0x1010, cs6;
02:-:-:-:2      BFI c2, cs5, 0x1010, cs4;
04:-:-:-:2      BFI c1, cs3, 0x1010, cs2;
08:-:-:-:2      BFI c0, cs1, 0x1010, cs0;

--:-:-:-:0      IADD k, k, 1;

// Store results back to global
01:1:-:-:1  @P5 STG.E.CG.128 [Out], c0;

--:-:-:-:0      PSETP.AND.AND P5, PT, P5, P6, P2;

--:-:2:-:2  @P6 SHFL.BFLY PT, sum1, sum0, 1,  0x1f;
02:-:-:-:4  @P6 FADD sum0, sum1, sum0;
--:-:2:-:2  @P6 SHFL.BFLY PT, sum1, sum0, 2,  0x1f;
02:-:-:-:4  @P6 FADD sum0, sum1, sum0;
--:-:2:-:2  @P6 SHFL.BFLY PT, sum1, sum0, 4,  0x1f;
02:-:-:-:2  @P6 FADD sum0, sum1, sum0;

01:-:-:-:0      IADD   Out0.CC, Out0, MPQN1;

--:2:-:-:5  @P5 RED.E.ADD.F32.FTZ.RN [Sum], sum0;

--:-:-:-:1      LOP.AND.NZ P2, RZ, flags, 2; // relu

--:-:-:-:1      IADD.X Out1,    Out1, RZ;

02:-:-:-:6      IADD   Sum0.CC, Sum0, 4;
--:-:-:-:0      IADD.X Sum1,    Sum1, RZ;

--:-:-:-:5      RET;
EOF
    }


    sub output_preds_int16
    {
        return <<'EOF';
--:-:-:-:1      MOV max,   RZ;
--:-:-:-:1      MOV alpha, param_alpha;
--:-:-:-:1      MOV beta,  param_beta;
--:-:-:-:1      MOV flags, param_flags;

--:-:-:-:1      ISETP.LT.AND P0, PT, n, param_N, PT; // n < N
--:-:-:-:1      LOP.AND.Z  P1, RZ, flags, 1; // !no-op
--:-:-:-:1      LOP.AND.NZ P2, RZ, flags, 2; // relu
--:-:-:-:1      LOP.AND.NZ P4, RZ, flags, 4; // bsum
EOF
    }

    # relu        = flags & 2
    # load beta   = n < N && k <  K && beta != 0
    # store out   = n < N && k <  K && flags & 1
    # reduce stat = n < N && k <  K
    # reduce bsum = flags & 4
    # output bsum = flags & 4 && tidOX63 == 0 && store out
    #
    # P0 = n < N
    # P1 = flags & 1 // no-op
    # P2 = flags & 2 // relu
    # P4 = flags & 4 // bsum
    #
    # // reduce stats
    # P6 = P0 && k < K
    #
    # // load beta
    # P3 = P0 && P6 && beta != 0
    #
    # // store out
    # P5 = P0 && P1 && P6
    #
    # // output bsum
    # P3 = P4 && P5 && tidOX63 == 0

    sub output_int16
    {
        return sprintf <<'EOF', $remapI ? 4 : $stepI;

--:-:-:-:0      LOP.AND.Z P0, RZ, tid, 31;
--:-:1:-:2      SHFL.BFLY PT, warp_max, max, 0x10, 0x1f;
01:-:-:-:4      IMNMX max, warp_max, max, !PT;
--:-:1:-:2      SHFL.BFLY PT, warp_max, max, 0x8,  0x1f;
01:-:-:-:4      IMNMX max, warp_max, max, !PT;
--:-:1:-:2      SHFL.BFLY PT, warp_max, max, 0x4,  0x1f;
01:-:-:-:4      IMNMX max, warp_max, max, !PT;
--:-:-:-:0      MOV Stats0, param_Stats[0];
--:-:1:-:2      SHFL.BFLY PT, warp_max, max, 0x2,  0x1f;
01:-:-:-:4      IMNMX max, warp_max, max, !PT;
--:-:-:-:0      MOV Stats1, param_Stats[1];
--:-:1:-:2      SHFL.BFLY PT, warp_max, max, 0x1,  0x1f;
01:-:-:-:2      IMNMX max, warp_max, max, !PT;
--:-:-:-:1  @P0 RED.E.MAX [Stats], max;
--:-:-:-:5      EXIT;

STORE_C:

<SCHEDULE_BLOCK>
--:-:-:-:1      ISETP.LT.AND P6, PT, k, param_K, P0; // reduce stats
--:-:-:-:1      ISETP.NE.AND P3, PT, beta, RZ, P6;   // load beta
--:-:-:-:1      PSETP.AND.AND P5, PT, P1, P6, PT;    // store out

// Apply relu
--:-:-:-:1  @P2 FMNMX cs0, cs0, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs1, cs1, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs2, cs2, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs3, cs3, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs4, cs4, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs5, cs5, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs6, cs6, RZ, !PT;
--:-:-:-:1  @P2 FMNMX cs7, cs7, RZ, !PT;

<ORDERED>
--:-:1:-:1  @P3 LDG.E.128 b0, [Out];

// Undo the stride in the X dim (items spaced by 32 are actually spaced 4)
--:-:-:-:1      STS.128 [writeCs + 4x<0>], cs0;
--:-:-:-:1      STS.128 [writeCs + 4x<%1$s>], cs4;
--:-:5:-:1      LDS.U.128 cs4, [readCs + 4x<4>];
--:-:6:-:1      LDS.U.128 cs0, [readCs + 4x<0>];
</ORDERED>
</SCHEDULE_BLOCK>

01:-:-:-:1  @P3 I2F.F32.S16 b7, b3.H1;
--:-:1:-:1  @P3 I2F.F32.S16 b6, b3.H0;
--:-:-:-:1  @P3 I2F.F32.S16 b5, b2.H1;
--:-:2:-:1  @P3 I2F.F32.S16 b4, b2.H0;
--:-:-:-:1  @P3 I2F.F32.S16 b3, b1.H1;
--:-:3:-:1  @P3 I2F.F32.S16 b2, b1.H0;
--:-:-:-:1  @P3 I2F.F32.S16 b1, b0.H1;
--:-:4:-:1  @P3 I2F.F32.S16 b0, b0.H0;

<SCHEDULE_BLOCK>
11:-:-:-:1  @P3 FFMA cs7, b7, beta, cs7;
--:-:-:-:1  @P3 FFMA cs6, b6, beta, cs6;
02:-:-:-:1  @P3 FFMA cs5, b5, beta, cs5;
--:-:-:-:1  @P3 FFMA cs4, b4, beta, cs4;
24:-:-:-:1  @P3 FFMA cs3, b3, beta, cs3;
--:-:-:-:1  @P3 FFMA cs2, b2, beta, cs2;
08:-:-:-:1  @P3 FFMA cs1, b1, beta, cs1;
--:-:-:-:1  @P3 FFMA cs0, b0, beta, cs0;

--:-:-:-:1      ISETP.EQ.AND P3, PT, tidOX63, RZ, P4; // output bsum
--:-:-:-:1      PSETP.AND.AND P3, PT, P3, P5, PT;     // output bsum

--:-:-:-:1      FMUL cs7, cs7, param_scale;
--:-:-:-:1      FMUL cs6, cs6, param_scale;
--:-:-:-:1      FMUL cs5, cs5, param_scale;
--:-:-:-:1      FMUL cs4, cs4, param_scale;
--:-:-:-:1      FMUL cs3, cs3, param_scale;
--:-:-:-:1      FMUL cs2, cs2, param_scale;
--:-:-:-:1      FMUL cs1, cs1, param_scale;
--:-:-:-:1      FMUL cs0, cs0, param_scale;

--:-:-:-:1  @P5 FADD sum0, cs7, cs6;
--:-:-:-:1  @P5 FADD sum1, cs5, cs4;
--:-:-:-:1  @P5 FADD sum2, cs3, cs2;
--:-:-:-:1  @P5 FADD sum3, cs1, cs0;
--:-:-:-:1  @P5 FADD sum0, sum0, sum1;
--:-:-:-:1  @P5 FADD sum1, sum2, sum3;
--:-:-:-:1  @P5 FADD sum0, sum0, sum1;
--:-:-:-:1 @!P5 MOV  sum0, RZ;

--:-:-:-:1      F2I.S16.F32 cs7, cs7;
--:-:1:-:1      F2I.S16.F32 cs6, cs6;
--:-:-:-:1      F2I.S16.F32 cs5, cs5;
--:-:2:-:1      F2I.S16.F32 cs4, cs4;
--:-:-:-:1      F2I.S16.F32 cs3, cs3;
--:-:3:-:1      F2I.S16.F32 cs2, cs2;
--:-:-:-:1      F2I.S16.F32 cs1, cs1;
--:-:4:-:1      F2I.S16.F32 cs0, cs0;
</SCHEDULE_BLOCK>

// Pack 2 16 bit values into 32 bit words
01:-:-:-:2      BFI c3, cs7, 0x1010, cs6;
02:-:-:-:2      BFI c2, cs5, 0x1010, cs4;
04:-:-:-:2      BFI c1, cs3, 0x1010, cs2;
08:-:-:-:2      BFI c0, cs1, 0x1010, cs0;

--:-:-:-:0      IADD k, k, 1;

// Store results back to global
--:1:-:-:4  @P5 STG.E.CG.128 [Out], c0;

<SCHEDULE_BLOCK>
// a = abs(a)
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16L cs0, c0,    RZ, RZ;
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16L cs1, c1,    RZ, RZ;
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16L cs2, c2,    RZ, RZ;
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16L cs3, c3,    RZ, RZ;
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16H cs0, c0.H1, RZ, cs0;
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16H cs1, c1.H1, RZ, cs1;
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16H cs2, c2.H1, RZ, cs2;
--:-:-:-:1  @P6 VABSDIFF.S16.S16.MRG_16H cs3, c3.H1, RZ, cs3;

// max = max(c,d,max(a,b,max)) ...
--:-:-:-:1  @P6 VMNMX.UD.U16.U16.MX.MAX max, cs0, cs0.H1, max;
--:-:-:-:1  @P6 VMNMX.UD.U16.U16.MX.MAX max, cs1, cs1.H1, max;
--:-:-:-:1  @P6 VMNMX.UD.U16.U16.MX.MAX max, cs2, cs2.H1, max;
--:-:-:-:1  @P6 VMNMX.UD.U16.U16.MX.MAX max, cs3, cs3.H1, max;

--:-:2:-:2  @P4 SHFL.BFLY PT, sum1, sum0, 1,  0x1f;
02:-:-:-:4  @P4 FADD sum0, sum1, sum0;
--:-:2:-:2  @P4 SHFL.BFLY PT, sum1, sum0, 2,  0x1f;
02:-:-:-:4  @P4 FADD sum0, sum1, sum0;
--:-:2:-:2  @P4 SHFL.BFLY PT, sum1, sum0, 4,  0x1f;
02:-:-:-:2  @P4 FADD sum0, sum1, sum0;
</SCHEDULE_BLOCK>

01:-:-:-:0      IADD   Out0.CC, Out0, MPQN1;
--:2:-:-:6  @P3 RED.E.ADD.F32.FTZ.RN [Sum], sum0;
--:-:-:-:1      IADD.X Out1,    Out1, RZ;

02:-:-:-:6      IADD   Sum0.CC, Sum0, 4;
--:-:-:-:0      IADD.X Sum1,    Sum1, RZ;

--:-:-:-:5      RET;
EOF
    }

    sub output_setup
    {
        my $tidOX = shift;
        return output_offset($tidOX) . output_step() . output_preds_int16() if $int16;
        return output_offset($tidOX) . output_step() . output_preds_fp16() if $prefix eq 'h';
        return output_offset($tidOX) . output_step() . output_preds_fp32() if $prefix eq 's';
    }

    sub output
    {
        return call_output() .output_int16() if $int16;
        return call_output() .output_fp16() if $prefix eq 'h';
        return call_output() .output_fp32() if $prefix eq 's';
    }

-]
